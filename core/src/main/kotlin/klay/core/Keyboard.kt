/**
 * Copyright 2010 The PlayN Authors

 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at

 * http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package klay.core

import klay.core.Keyboard.Event
import react.Slot

/**
 * Defines and dispatches keyboard events. Three events are generated by keyboard input:
 *
 *  *  When any key is depressed, a [KeyEvent] is emitted indicating the logical key that
 * was depressed.
 *  *  If the depressed key also corresponds to a printable character ('c' for example, but not
 * shift or alt), a [TypedEvent] is emitted to inform the app of the typed character. The
 * typed character will account for whether the shift key is depressed and will be appropriately
 * mapped to the uppercase equivalent or the appropriate alternate character (for example, # for 3,
 * in the US keyboard layout). The typed event is delivered immediately after the pressed event.
 *
 *  *  When a key is released, a [KeyEvent] is emitted, indicating the logical key that was
 * released.
 *
 */
abstract class Keyboard {

    /** The base class for all keyboard events.  */
    open class Event protected constructor(flags: Int, time: Double) : klay.core.Event.Input(flags, time)

    /** An event dispatched for key press/release.  */
    class KeyEvent(flags: Int, time: Double,
                   /** The key that triggered this event, e.g. [Key.A], etc.  */
                   val key: Key,
                   /** Whether the key is down or up.  */
                   val down: Boolean) : Event(flags, time) {

        override fun name(): String {
            return "Key"
        }

        override fun addFields(builder: StringBuilder) {
            super.addFields(builder)
            builder.append(", key=").append(key).append(", down=").append(down)
        }
    }

    /** An event dispatched when a printable character is typed.  */
    class TypedEvent(flags: Int, time: Double,
                     /** The character typed to trigger this event, e.g. 'c'.  */
                     var typedChar: Char) : Event(flags, time) {

        override fun name(): String {
            return "Typed"
        }

        override fun addFields(builder: StringBuilder) {
            super.addFields(builder)
            builder.append(", typedChar=").append(typedChar)
        }
    }

    companion object {
        /** Converts a slot of [Event]s to a slot which only dispatches on [KeyEvent]s.  */
        fun keySlot(slot: Slot<KeyEvent>): Slot<Event> = { if (it is KeyEvent) slot(it) }

        /** Converts a slot of [Event]s to a slot which only dispatches on [TypedEvent]s.  */
        fun typedSlot(slot: Slot<TypedEvent>): Slot<Event> = { if (it is TypedEvent) slot(it) }

    }

    /** Enumerates the different available mobile keyboard types. See [Input.getText].  */
    enum class TextType {
        DEFAULT, NUMBER, EMAIL, URL
    }
}
